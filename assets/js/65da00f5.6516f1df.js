(self.webpackChunkdoc_ops=self.webpackChunkdoc_ops||[]).push([[6949],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),h=i,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||r;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1687:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var a=n(2122),i=n(9756),r=(n(7294),n(3905)),o=["components"],s={},c="Setting up a chain",l={unversionedId:"guide/chains_and_nodes/setup",id:"guide/chains_and_nodes/setup",isDocsHomePage:!1,title:"Setting up a chain",description:'Note: it is possible to run a "committee" composed of a single Wasp node, and',source:"@site/docs/guide/chains_and_nodes/setup.md",sourceDirName:"guide/chains_and_nodes",slug:"/guide/chains_and_nodes/setup",permalink:"/docs/guide/chains_and_nodes/setup",editUrl:"https://github.com/iotaledger/chronicle.rs/tree/main/docs/docs/guide/chains_and_nodes/setup.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Configuring wasp-cli",permalink:"/docs/guide/chains_and_nodes/wasp-cli"},next:{title:"Chain Management",permalink:"/docs/guide/chains_and_nodes/manage"}},p=[{value:"Requirements",id:"requirements",children:[]},{value:"Trust Setup",id:"trust-setup",children:[]},{value:"Starting the chain",id:"starting-the-chain",children:[{value:"Requesting test funds",id:"requesting-test-funds",children:[]},{value:"Deploy the ISCP chain",id:"deploy-the-iscp-chain",children:[]}]},{value:"Testing if it works",id:"testing-if-it-works",children:[{value:"Deploying a wasm contract",id:"deploying-a-wasm-contract",children:[]},{value:"Interacting with a Smart contract",id:"interacting-with-a-smart-contract",children:[]}]}],u={toc:p};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"setting-up-a-chain"},"Setting up a chain"),(0,r.kt)("p",null,'Note: it is possible to run a "committee" composed of a single Wasp node, and\nthis may be fine for testing purposes. However, in normal operation the idea is\nto have multiple Wasp nodes in order to run the smart contracts in a\ndistributed fashion. If you want to run a committee of several nodes on the\nsame machine, ensure that each Wasp instance runs in separate directory with\nits own ',(0,r.kt)("inlineCode",{parentName:"p"},"config.json")," and database. Ports and other settings must be adjusted\naccordingly."),(0,r.kt)("p",null,"Also, for testing purposes, all Wasp nodes can be connected to the same\nGoshimmer instance.  In normal operation, it is recommended for each Wasp node\nto connect to a different Goshimmer instance."),(0,r.kt)("h2",{id:"requirements"},"Requirements"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a number of many wasp nodes running with access to the same L1 network (pollen)."),(0,r.kt)("li",{parentName:"ul"},"wasp-cli configured to interact with the wasp nodes")),(0,r.kt)("h2",{id:"trust-setup"},"Trust Setup"),(0,r.kt)("p",null,"After starting all the ",(0,r.kt)("inlineCode",{parentName:"p"},"wasp")," nodes, one should make them trust each other.\nOperators of the nodes should do that manually. That's their responsibility to\naccept trusted nodes only."),(0,r.kt)("p",null,"The operator can read its node's public key and NetID by running ",(0,r.kt)("inlineCode",{parentName:"p"},"wasp-cli peering info"),", e.g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ wasp-cli peering info\nPubKey: 8oQ9xHWvfnShRxB22avvjbMyAumZ7EXKujuthqrzapNM\nNetID:  127.0.0.1:4000\n")),(0,r.kt)("p",null,"PubKey and NetID should be provided to other node operators.\nThey can use this info to trust your node and accept communications with it.\nThat's done by invoking ",(0,r.kt)("inlineCode",{parentName:"p"},"wasp-cli peering trust <PubKey> <NetID>"),", e.g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ wasp-cli peering list-trusted\n$ wasp-cli peering trust 8oQ9xHWvfnShRxB22avvjbMyAumZ7EXKujuthqrzapNM 127.0.0.1:4000\n$ wasp-cli peering list-trusted\n------                                        -----\nPubKey                                        NetID\n------                                        -----\n8oQ9xHWvfnShRxB22avvjbMyAumZ7EXKujuthqrzapNM  127.0.0.1:4000\n")),(0,r.kt)("p",null,"All the nodes in a committee must trust each other to run the chain."),(0,r.kt)("h2",{id:"starting-the-chain"},"Starting the chain"),(0,r.kt)("h3",{id:"requesting-test-funds"},"Requesting test funds"),(0,r.kt)("p",null,"(If you're using a seed tha that already holds fund, you can skip this step)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ wasp-cli request-funds\n")),(0,r.kt)("h3",{id:"deploy-the-iscp-chain"},"Deploy the ISCP chain"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'$ wasp-cli chain deploy --committee=0,1,2,3 --quorum=3 --chain=mychain --description="My chain"\n')),(0,r.kt)("p",null,"The indices in ",(0,r.kt)("inlineCode",{parentName:"p"},"--committee=0,1,2,3")," will correspond to ",(0,r.kt)("inlineCode",{parentName:"p"},"wasp.0"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wasp.1"),", etc in ",(0,r.kt)("inlineCode",{parentName:"p"},"wasp-cli.json"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"--chain=mychain")," sets up an alias for the chain. From now on all chain commands will be targeted to this chain."),(0,r.kt)("h2",{id:"testing-if-it-works"},"Testing if it works"),(0,r.kt)("p",null,"You can check that the chain was properly deployed in the Wasp node dashboard\n(e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"127.0.0.1:7000"),"). Note that the chain was deployed with some ",(0,r.kt)("a",{parentName:"p",href:"/docs/guide/core_concepts/core-contracts"},"core contracts"),"."),(0,r.kt)("h3",{id:"deploying-a-wasm-contract"},"Deploying a wasm contract"),(0,r.kt)("p",null,"It's now possible deploy a Wasm contract to the chain:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'$ wasp-cli chain deploy-contract wasmtimevm inccounter "inccounter SC" tools/cluster/tests/wasm/inccounter_bg.wasm\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"inccounter_bg.wasm")," file is a precompiled Wasm contract included in the Wasp repo as an example."),(0,r.kt)("p",null,"Check again in the dashboard that the ",(0,r.kt)("inlineCode",{parentName:"p"},"inccounter")," contract is listed in the chain."),(0,r.kt)("h3",{id:"interacting-with-a-smart-contract"},"Interacting with a Smart contract"),(0,r.kt)("p",null,"We can interact with a contract by calling its exposed functions and views."),(0,r.kt)("p",null,"For instance, the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wasp/tree/master/contracts/rust/inccounter/src"},(0,r.kt)("inlineCode",{parentName:"a"},"inccounter")),"\ncontract exposes the ",(0,r.kt)("inlineCode",{parentName:"p"},"increment")," function, which simply increments a counter\nstored in the state. Also we have the ",(0,r.kt)("inlineCode",{parentName:"p"},"getCounter")," view that returns the\ncurrent value of the counter."),(0,r.kt)("p",null,"Let's call the ",(0,r.kt)("inlineCode",{parentName:"p"},"getCounter")," view:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ wasp-cli chain call-view inccounter getCounter | wasp-cli decode string counter int\ncounter: 0\n")),(0,r.kt)("p",null,"Note: the part after ",(0,r.kt)("inlineCode",{parentName:"p"},"|")," is necessary because the return value is encoded and\nwe need to know the ",(0,r.kt)("em",{parentName:"p"},"schema")," in order to decode it. The schema definition is in\nits early stages and will likely change in the future."),(0,r.kt)("p",null,"Now, let's call the ",(0,r.kt)("inlineCode",{parentName:"p"},"increment")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ wasp-cli chain post-request inccounter increment\n")),(0,r.kt)("p",null,"After the request has been processed by the committee we should get a new\ncounter value after calling ",(0,r.kt)("inlineCode",{parentName:"p"},"getCounter"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ wasp-cli chain call-view inccounter getCounter | wasp-cli decode string counter int\ncounter: 1\n")))}d.isMDXComponent=!0}}]);