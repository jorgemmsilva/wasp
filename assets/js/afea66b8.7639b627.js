(self.webpackChunkdoc_ops=self.webpackChunkdoc_ops||[]).push([[8807],{3905:function(t,e,n){"use strict";n.d(e,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var s=r.createContext({}),l=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):c(c({},e),t)),n},p=function(t){var e=l(t.components);return r.createElement(s.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},h=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,s=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),h=l(n),d=o,m=h["".concat(s,".").concat(d)]||h[d]||u[d]||a;return n?r.createElement(m,c(c({ref:e},p),{},{components:n})):r.createElement(m,c({ref:e},p))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,c=new Array(a);c[0]=h;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i.mdxType="string"==typeof t?t:o,c[1]=i;for(var l=2;l<a;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7881:function(t,e,n){"use strict";n.r(e),n.d(e,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return h}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),c=["components"],i={},s="The `accounts` contract",l={unversionedId:"contract_core/accounts",id:"contract_core/accounts",isDocsHomePage:!1,title:"The `accounts` contract",description:"The accounts contract is one of the core contracts on each ISCP",source:"@site/docs/contract_core/accounts.md",sourceDirName:"contract_core",slug:"/contract_core/accounts",permalink:"/docs/contract_core/accounts",editUrl:"https://github.com/iotaledger/chronicle.rs/tree/main/docs/docs/contract_core/accounts.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"The `root` contract",permalink:"/docs/contract_core/root"},next:{title:"The `blob` contract",permalink:"/docs/contract_core/blob"}},p=[{value:"Entry Points",id:"entry-points",children:[]},{value:"Views",id:"views",children:[]}],u={toc:p};function h(t){var e=t.components,n=(0,o.Z)(t,c);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"the-accounts-contract"},"The ",(0,a.kt)("inlineCode",{parentName:"h1"},"accounts")," contract"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"accounts")," contract is one of the ",(0,a.kt)("a",{parentName:"p",href:"/docs/contract_core/overview"},"core contracts")," on each ISCP\nchain."),(0,a.kt)("p",null,"The function of the ",(0,a.kt)("inlineCode",{parentName:"p"},"accounts")," contract is to keep in its state a consistent ledger of\non-chain accounts for the agents that control them. There are two types of agents who can do it:\nL1 addresses and smart contracts."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"accounts")," contract provides functions to deposit and withdraw tokens.\nIt also provides information about the assets deposited on the chain.",(0,a.kt)("br",{parentName:"p"}),"\n","Note that the ledger of accounts on the chain is consistently maintained behind scenes by the VM.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"accounts")," contract provides a front-end of authorized access to those\naccounts for outside usersof the chain."),(0,a.kt)("h3",{id:"entry-points"},"Entry Points"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"deposit")," moves tokens attached as a transfer to a target account on the\nchain. If the agent ID parameter ",(0,a.kt)("inlineCode",{parentName:"p"},"a")," is specified the target account is the\none controlled by that agent ID. Otherwise, the target account is the one\ncontrolled by the caller (this makes sense only if it is a request, not if it\nis an on-chain call).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"withdraw")," moves all tokens from the caller's on-chain account to another\nchain, or to an address on L1. It cannot be used to move tokens within the\ncurrent chain.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"harvest")," moves tokens from the common (default( account controlled by the chain owner to the proper owner's\naccount on the same chain. Only authorised to whoever is an owner of the chain."))),(0,a.kt)("h3",{id:"views"},"Views"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"accounts")," returns a list of all non-empty accounts in the chain as a list\nof serialized ",(0,a.kt)("inlineCode",{parentName:"p"},"agent IDs"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"balance")," returns the colored token balances that are controlled by the\n",(0,a.kt)("inlineCode",{parentName:"p"},"agent ID")," that was specified in the call parameters. It returns the\nbalances as a dictionary of ",(0,a.kt)("inlineCode",{parentName:"p"},"color: amount")," pairs.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"totalAssets")," - Returns the colored balances controlled by the chain.\nThey are always equal to the sum of all on-chain accounts, color-by-color."))))}h.isMDXComponent=!0}}]);