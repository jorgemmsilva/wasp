(self.webpackChunkdoc_ops=self.webpackChunkdoc_ops||[]).push([[4206],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return m}});var c=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);t&&(c=c.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,c)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,c,o=function(e,t){if(null==e)return{};var n,c,o={},r=Object.keys(e);for(c=0;c<r.length;c++)n=r[c],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(c=0;c<r.length;c++)n=r[c],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=c.createContext({}),u=function(e){var t=c.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=u(e.components);return c.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return c.createElement(c.Fragment,{},t)}},d=c.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||r;return n?c.createElement(h,a(a({ref:t},l),{},{components:n})):c.createElement(h,a({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var u=2;u<r;u++)a[u]=n[u];return c.createElement.apply(null,a)}return c.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8578:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return l},default:function(){return d}});var c=n(2122),o=n(9756),r=(n(7294),n(3905)),a=["components"],i={},s="How accounts work",u={unversionedId:"guide/core_concepts/accounts/accounts-how",id:"guide/core_concepts/accounts/accounts-how",isDocsHomePage:!1,title:"How accounts work",description:"Each ISCP chain keeps a ledger of on-chain account balances.",source:"@site/docs/guide/core_concepts/accounts/accounts-how.md",sourceDirName:"guide/core_concepts/accounts",slug:"/guide/core_concepts/accounts/accounts-how",permalink:"/docs/guide/core_concepts/accounts/accounts-how",editUrl:"https://github.com/iotaledger/chronicle.rs/tree/main/docs/docs/guide/core_concepts/accounts/accounts-how.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"core-contracts",permalink:"/docs/guide/core_concepts/core-contracts"},next:{title:"How to deposit to a chain",permalink:"/docs/guide/core_concepts/accounts/accounts-deposit"}},l=[{value:"Account ownership",id:"account-ownership",children:[]},{value:"The Accounts Contract",id:"the-accounts-contract",children:[]}],p={toc:l};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,r.kt)("wrapper",(0,c.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-accounts-work"},"How accounts work"),(0,r.kt)("p",null,"Each ISCP chain keeps a ledger of on-chain account balances."),(0,r.kt)("h2",{id:"account-ownership"},"Account ownership"),(0,r.kt)("p",null,"An on-chain account is identified by an AgentID."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The AgentID for accounts owned by L1 entities (regular IOTA wallets) looks like the following:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'Hname: 0\nAddress: "some address"\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The AgentID for accounts owned by L2 entities (Smart Contracts) :"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'Hname: "Hname of the entity"\nAddress: "Address of the chain where the entity exists"\n')),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("em",{parentName:"p"},"example"),": the smart contract with hname ",(0,r.kt)("inlineCode",{parentName:"p"},"123")," that exists on the chain with address ",(0,r.kt)("inlineCode",{parentName:"p"},"000"),", can be identified on ",(0,r.kt)("strong",{parentName:"p"},"any")," chain by the following AgentID:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"Hname: 123\nAddress: 000\n")))),(0,r.kt)("h2",{id:"the-accounts-contract"},"The Accounts Contract"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Accounts")," contract manages what funds are owned by which accounts."),(0,r.kt)("p",null,"Internally there is a mapping of ",(0,r.kt)("inlineCode",{parentName:"p"},"Account (AgentID)")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"balances"),", which can include normal IOTAs and/or any colored tokens."),(0,r.kt)("p",null,"By calling this contract its possible to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/guide/core_concepts/accounts/accounts-views"},"View current account balances")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/guide/core_concepts/accounts/accounts-deposit"},"Deposit funds to the chain")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/guide/core_concepts/accounts/accounts-withdraw"},"Withdraw funds from the chain")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/guide/core_concepts/accounts/accounts-common-account"},"Harvest")," - can only be called by the chain owner, to move funds from the chain common account to his own account.")))}d.isMDXComponent=!0}}]);