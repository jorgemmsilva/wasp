(self.webpackChunkdoc_ops=self.webpackChunkdoc_ops||[]).push([[1970],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,m=u["".concat(l,".").concat(d)]||u[d]||h[d]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5708:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),i=["components"],s={},l="Invoking smart contracts. Sending a request `on-ledger`",c={unversionedId:"tutorial/06",id:"tutorial/06",isDocsHomePage:!1,title:"Invoking smart contracts. Sending a request `on-ledger`",description:"In this chapter we will describe sending requests to the smart contract as transactions on the Tangle.",source:"@site/docs/tutorial/06.md",sourceDirName:"tutorial",slug:"/tutorial/06",permalink:"/docs/tutorial/06",editUrl:"https://github.com/iotaledger/chronicle.rs/tree/main/docs/docs/tutorial/06.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Structure of the smart contract",permalink:"/docs/tutorial/05"},next:{title:"Invoking smart contracts. Calling a view",permalink:"/docs/tutorial/07"}},p=[],h={toc:p};function u(e){var t=e.components,s=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"invoking-smart-contracts-sending-a-request-on-ledger"},"Invoking smart contracts. Sending a request ",(0,o.kt)("inlineCode",{parentName:"h1"},"on-ledger")),(0,o.kt)("p",null,"In this chapter we will describe sending requests to the smart contract as transactions on the Tangle.\nIt is so called ",(0,o.kt)("inlineCode",{parentName:"p"},"on-ledger")," requests and can be sent to any chain deployed on the Tangle without accessing Wasp node,\njust posting transaction to the Tangle. The request will find target chain itself."),(0,o.kt)("p",null,"The alternative way of sending requests is so-called ",(0,o.kt)("inlineCode",{parentName:"p"},"off-ledger")," requests. Its an API call to the Wasp node, which has access\nto the state of the target chain, an ",(0,o.kt)("inlineCode",{parentName:"p"},"access node"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"off-ledger")," request is not a transaction so\nno need to confirm it on the Tangle. The ",(0,o.kt)("inlineCode",{parentName:"p"},"off-ledger")," requests are much faster. We will describe them in a separate chapter."),(0,o.kt)("p",null,"The statements"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'    req := solo.NewCallParams("example1", "storeString", "paramString", "Hello, world!").WithIotas(1)\n    _, err = chain.PostRequestSync(req, nil)\n')),(0,o.kt)("p",null,"in the example ",(0,o.kt)("inlineCode",{parentName:"p"},"TestTutorial3")," invoke the ",(0,o.kt)("inlineCode",{parentName:"p"},"storeString")," entry point of the\n",(0,o.kt)("inlineCode",{parentName:"p"},"example1")," smart contract by posting it as a request. The parameter\nnamed ",(0,o.kt)("inlineCode",{parentName:"p"},"paramString"),' is passed with the string value "Hello, world!". The ',(0,o.kt)("em",{parentName:"p"},"Solo"),'\ntest code itself is separate from the chain where the smart contract is\ninvoked, and is not executed "on-chain".'),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"NewCallParams")," creates a call object named ",(0,o.kt)("inlineCode",{parentName:"p"},"req")," which wraps all call\nparameters into a single object. This is syntactic sugar just for convenience.\nIn this case the call object only wraps the target smart contract name, target\nentry point name, and one named parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"paramString"),". In other cases it could\ncontain many parameters."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"WithIotas")," attaches a single iota with the request. All ",(0,o.kt)("inlineCode",{parentName:"p"},"on-ledger")," requests\nare implemented as value transactions with additional data, and therefore we\nneed to transfer at least a single token for the request to be valid."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PostRequestSync")," sends the request to the chain. Let\u2019s describe in detail what\nis going on here."),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(7565).Z})),(0,o.kt)("p",null,"The diagram above depicts the generic process of posting an ",(0,o.kt)("inlineCode",{parentName:"p"},"on-ledger")," request to the smart\ncontract. The same picture is valid for the ",(0,o.kt)("em",{parentName:"p"},"Solo")," environment and for any other\nrequester which sends an ",(0,o.kt)("inlineCode",{parentName:"p"},"on-ledger")," request to the smart contract, for example the ISCP\nwallet or another chain."),(0,o.kt)("p",null,"Posting the request always consists of the steps below. Note that in Solo all 7\nsteps are carried out by the single call to ",(0,o.kt)("inlineCode",{parentName:"p"},"PostRequestSync"),"."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Creating the smart contract transaction which wraps the request with metadata\nand moves tokens. Each request transaction is a value transaction, it always\nmoves at least one token. Therefore, each request transaction must be signed\nby the private key of the owner of the tokens: the requester. That securely\nidentifies each requester in ISCP. In Solo the transaction is signed by the\nprivate key provided in the second parameter of the ",(0,o.kt)("inlineCode",{parentName:"li"},"PostRequestSync"),"\ncall (see below);"),(0,o.kt)("li",{parentName:"ol"},"Posting the request transaction to the Tangle and confirming it. In ",(0,o.kt)("em",{parentName:"li"},"Solo")," it\nis just adding the transaction to the ",(0,o.kt)("inlineCode",{parentName:"li"},"UTXODB ledger"),", the emulated UTXO\nLedger, so it is confirmed immediately and synchronously. The confirmed\ntransaction on the ledger becomes part of the backlog of requests to the\nchain. In the real UTXO Ledger the sender would have to wait until the ledger\nconfirms the transaction;"),(0,o.kt)("li",{parentName:"ol"},"The chain picks the request from the backlog and runs the request on the VM;"),(0,o.kt)("li",{parentName:"ol"},"The VM calls the target entry point of the smart contract program. The\nprogram updates the state;"),(0,o.kt)("li",{parentName:"ol"},"The VM produces a state update transaction (the ",(0,o.kt)("inlineCode",{parentName:"li"},"anchor"),");"),(0,o.kt)("li",{parentName:"ol"},"The chain signs the transaction with its private key. In the ",(0,o.kt)("em",{parentName:"li"},"Solo"),"\nenvironment it is the ",(0,o.kt)("inlineCode",{parentName:"li"},"ChainSigScheme")," property of the chain. In the real\nWasp environment it is the threshold signature of the committee of validator nodes;"),(0,o.kt)("li",{parentName:"ol"},"The chain posts the resulting transaction to the Tangle and, after confirmation, solidifies the corresponding state. In the ",(0,o.kt)("em",{parentName:"li"},"Solo")," environment it adds\nthe transaction to the UTXODB ledger.")),(0,o.kt)("p",null,"The following lines in the log corresponds to the step 7:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"54:43.809   INFO    TestTutorial3.ex3   vmcontext/runreq.go:311 eventlog -> '[req] [0]CHvU6BUDgt9MZJTxsYMZ1p1veg591mvwKGQBJd2KYdaB: Ok'\n54:43.809   INFO    TestTutorial3   solo/clock.go:35    AdvanceClockBy: logical clock advanced by 2ns\n54:43.809   INFO    TestTutorial3.ex3.m mempool/mempool.go:119  OUT MEMPOOL [0]CHvU6BUDgt9MZJTxsYMZ1p1veg591mvwKGQBJd2KYdaB\n54:43.809   INFO    TestTutorial3.ex3   solo/run.go:86  state transition #2 --\x3e #3. Requests in the block: 1. Outputs: 1\n")),(0,o.kt)("p",null,"The chain adds a record about successfully processed request\n",(0,o.kt)("inlineCode",{parentName:"p"},"[0]CHvU6BUDgt9MZJTxsYMZ1p1veg591mvwKGQBJd2KYdaB")," to the immutable on-chain log."),(0,o.kt)("p",null,"The statement ",(0,o.kt)("inlineCode",{parentName:"p"},"_, err = chain.PostRequestSync(req, nil)")," in the Solo test uses ",(0,o.kt)("inlineCode",{parentName:"p"},"nil"),"\nfor the default signature scheme of the requester. The ",(0,o.kt)("inlineCode",{parentName:"p"},"OriginatorSigScheme"),",\nthe one which deployed the chain, is used as the default requester. In the\n",(0,o.kt)("em",{parentName:"p"},"Solo")," environment you can create other identities for requesters (\u201cwallets\u201d)\nwith ",(0,o.kt)("inlineCode",{parentName:"p"},"NewKeyPairWithFunds"),"."))}u.isMDXComponent=!0},7565:function(e,t,n){"use strict";t.Z=n.p+"assets/images/send_request-e8474fa9d472f729146bb945568a0435.png"}}]);