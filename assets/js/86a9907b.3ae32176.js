(self.webpackChunkdoc_ops=self.webpackChunkdoc_ops||[]).push([[9410],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),k=s(n),f=o,d=k["".concat(l,".").concat(f)]||k[f]||u[f]||a;return n?r.createElement(d,c(c({ref:t},p),{},{components:n})):r.createElement(d,c({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=k;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var s=2;s<a;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},3801:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return k}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),c=["components"],i={},l="The `blocklog` contract",s={unversionedId:"contract_core/blocklog",id:"contract_core/blocklog",isDocsHomePage:!1,title:"The `blocklog` contract",description:"The blocklog contract is one of the core contracts on each ISCP",source:"@site/docs/contract_core/blocklog.md",sourceDirName:"contract_core",slug:"/contract_core/blocklog",permalink:"/docs/contract_core/blocklog",editUrl:"https://github.com/iotaledger/chronicle.rs/tree/main/docs/docs/contract_core/blocklog.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"The `blob` contract",permalink:"/docs/contract_core/blob"},next:{title:"The `governance` contract",permalink:"/docs/contract_core/governance"}},p=[{value:"Entry Points",id:"entry-points",children:[]},{value:"Views",id:"views",children:[]}],u={toc:p};function k(e){var t=e.components,n=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"the-blocklog-contract"},"The ",(0,a.kt)("inlineCode",{parentName:"h1"},"blocklog")," contract"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"blocklog")," contract is one of the ",(0,a.kt)("a",{parentName:"p",href:"/docs/contract_core/overview"},"core contracts")," on each ISCP\nchain."),(0,a.kt)("p",null,"The function of the ",(0,a.kt)("inlineCode",{parentName:"p"},"blocklog")," contract is to keep track of the blocks of\nrequests that were processed by the chain."),(0,a.kt)("p",null,"It provides views to get request status or receipts, block information, or events (per request / block / smart contract)."),(0,a.kt)("h3",{id:"entry-points"},"Entry Points"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"blocklog")," core contract does not contain any entry points which modify its\nstate."),(0,a.kt)("p",null,"The only way to modify the ",(0,a.kt)("inlineCode",{parentName:"p"},"blocklog")," state is by submitting requests for\nprocessing to the chain."),(0,a.kt)("h3",{id:"views"},"Views"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"viewGetBlockInfo")," - Returns the data of the block in the chain with\nspecified index.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"viewGetLatestBlockInfo")," - Returns the index and data of the latest block in\nthe chain.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"viewGetRequestLogRecord")," - Returns the data, block index, and request index\nof the specified request.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"viewGetRequestLogRecordsForBlock")," - Returns the data, block index, and\nrequest index of all requests in the block with the specified block index.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"viewGetRequestIDsForBlock")," - Returns the IDs of all requests in the block\nwith the specified block index.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"viewIsRequestProcessed")," - Returns whether a request with specified ID has\nbeen processed.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"viewGetEventsForRequest")," - returns a list of events for a given request.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"viewGetEventsForBlock")," - returns a list of events for a given block.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"viewGetEventsForContract")," - returns a list of events for a given smart contract."))))}k.isMDXComponent=!0}}]);