(self.webpackChunkdoc_ops=self.webpackChunkdoc_ops||[]).push([[4206],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=s(n),d=r,k=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(k,c(c({ref:t},p),{},{components:n})):a.createElement(k,c({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var s=2;s<o;s++)c[s]=n[s];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8578:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),c=["components"],i={},l="How accounts work",s={unversionedId:"guide/core_concepts/accounts/accounts-how",id:"guide/core_concepts/accounts/accounts-how",isDocsHomePage:!1,title:"How accounts work",description:"Each ISCP chain keeps a ledger of on-chain account balances.",source:"@site/docs/guide/core_concepts/accounts/accounts-how.md",sourceDirName:"guide/core_concepts/accounts",slug:"/guide/core_concepts/accounts/accounts-how",permalink:"/docs/guide/core_concepts/accounts/accounts-how",editUrl:"https://github.com/iotaledger/chronicle.rs/tree/main/docs/docs/guide/core_concepts/accounts/accounts-how.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"State, transitions and state anchoring",permalink:"/docs/guide/core_concepts/states"},next:{title:"How to deposit to a chain",permalink:"/docs/guide/core_concepts/accounts/accounts-deposit"}},p=[{value:"Account ownership",id:"account-ownership",children:[]},{value:"The Accounts Contract",id:"the-accounts-contract",children:[{value:"Entrypoints",id:"entrypoints",children:[]}]}],u={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-accounts-work"},"How accounts work"),(0,o.kt)("p",null,"Each ISCP chain keeps a ledger of on-chain account balances."),(0,o.kt)("h2",{id:"account-ownership"},"Account ownership"),(0,o.kt)("p",null,"An on-chain account is identified by an AgentID."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The AgentID for accounts owned by L1 entities (regular IOTA wallets) looks like the following:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'Hname: 0\nAddress: "some address"\n'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The AgentID for accounts owned by L2 entities (Smart Contracts) :"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'Hname: "Hname of the entity"\nAddress: "Address of the chain where the entity exists"\n')),(0,o.kt)("p",{parentName:"li"},"  ",(0,o.kt)("em",{parentName:"p"},"example"),": the smart contract with hname ",(0,o.kt)("inlineCode",{parentName:"p"},"123")," that exists on the chain with address ",(0,o.kt)("inlineCode",{parentName:"p"},"000"),", can be identified on ",(0,o.kt)("strong",{parentName:"p"},"any")," chain by the following AgentID:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"Hname: 123\nAddress: 000\n")))),(0,o.kt)("h2",{id:"the-accounts-contract"},"The Accounts Contract"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Accounts")," contract manages what funds are owned by which accounts."),(0,o.kt)("p",null,"Internally there is a mapping of ",(0,o.kt)("inlineCode",{parentName:"p"},"Account (AgentID)")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"balances"),", which can include normal IOTAs and/or any colored tokens."),(0,o.kt)("h3",{id:"entrypoints"},"Entrypoints"),(0,o.kt)("p",null,"The entrypoints available for this Smart Contract are:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Views"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"balance")," - get the account balance of a specific account"),(0,o.kt)("p",{parentName:"li"},"parameters:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ParamAgentID")," - account's AgentID")),(0,o.kt)("p",{parentName:"li"},"returns:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"a map of ","[token_color]"," -> ","[amount]"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"totalAssets")," - get the total colored balances controlled by the chain"),(0,o.kt)("p",{parentName:"li"},"returns:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"a map of ","[token_color]"," -> ","[amount]"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"accounts")," - get a list of all accounts existing on the chain"),(0,o.kt)("p",{parentName:"li"},"  returns:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"a list of accounts (AgentIDs)")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Calls"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"deposit funds // TODO add link"),(0,o.kt)("li",{parentName:"ul"},"withdrawal funds // TODO add link"),(0,o.kt)("li",{parentName:"ul"},"harvest // TODO")))}m.isMDXComponent=!0}}]);