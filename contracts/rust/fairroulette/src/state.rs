// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;
use crate::types::*;

pub struct ArrayOfImmutableBet {
    pub(crate) obj_id: i32,
}

impl ArrayOfImmutableBet {
    pub fn length(&self) -> i32 {
        get_length(self.obj_id)
    }

    pub fn get_bet(&self, index: i32) -> ImmutableBet {
        ImmutableBet { obj_id: self.obj_id, key_id: Key32(index) }
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableFairRouletteState {
    pub(crate) id: i32,
}

impl ImmutableFairRouletteState {
    pub fn bets(&self) -> ArrayOfImmutableBet {
        let arr_id = get_object_id(self.id, idx_map(IDX_STATE_BETS), TYPE_ARRAY | TYPE_BYTES);
        ArrayOfImmutableBet { obj_id: arr_id }
    }

    pub fn last_winning_number(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_STATE_LAST_WINNING_NUMBER))
    }

    pub fn play_period(&self) -> ScImmutableInt32 {
        ScImmutableInt32::new(self.id, idx_map(IDX_STATE_PLAY_PERIOD))
    }

    pub fn round_number(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_STATE_ROUND_NUMBER))
    }

    pub fn round_started_at(&self) -> ScImmutableInt32 {
        ScImmutableInt32::new(self.id, idx_map(IDX_STATE_ROUND_STARTED_AT))
    }

    pub fn round_status(&self) -> ScImmutableInt16 {
        ScImmutableInt16::new(self.id, idx_map(IDX_STATE_ROUND_STATUS))
    }
}

pub struct ArrayOfMutableBet {
    pub(crate) obj_id: i32,
}

impl ArrayOfMutableBet {
    pub fn clear(&self) {
        clear(self.obj_id);
    }

    pub fn length(&self) -> i32 {
        get_length(self.obj_id)
    }

    pub fn get_bet(&self, index: i32) -> MutableBet {
        MutableBet { obj_id: self.obj_id, key_id: Key32(index) }
    }
}

#[derive(Clone, Copy)]
pub struct MutableFairRouletteState {
    pub(crate) id: i32,
}

impl MutableFairRouletteState {
    pub fn bets(&self) -> ArrayOfMutableBet {
        let arr_id = get_object_id(self.id, idx_map(IDX_STATE_BETS), TYPE_ARRAY | TYPE_BYTES);
        ArrayOfMutableBet { obj_id: arr_id }
    }

    pub fn last_winning_number(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_STATE_LAST_WINNING_NUMBER))
    }

    pub fn play_period(&self) -> ScMutableInt32 {
        ScMutableInt32::new(self.id, idx_map(IDX_STATE_PLAY_PERIOD))
    }

    pub fn round_number(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_STATE_ROUND_NUMBER))
    }

    pub fn round_started_at(&self) -> ScMutableInt32 {
        ScMutableInt32::new(self.id, idx_map(IDX_STATE_ROUND_STARTED_AT))
    }

    pub fn round_status(&self) -> ScMutableInt16 {
        ScMutableInt16::new(self.id, idx_map(IDX_STATE_ROUND_STATUS))
    }
}
